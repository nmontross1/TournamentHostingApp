<template>
<body>
<header>
  <title>Tournament Hosting Register Page</title>
  <h2 class="h3 mb-3 font-weight-normal">Create Account</h2>
</header>
  <div id="register" class="text-center">
    <form class="form-register" @submit.prevent="register">  
      <div class="alert alert-danger" role="alert" v-if="registrationErrors">
        {{ registrationErrorMsg }}
      </div>
      <label for="username" class="sr-only"><b>Username: </b></label>
      <input
        type="text"
        id="username"
        class="form-control"
        placeholder="Username"
        v-model="user.username"
        required
        autofocus
      />
      <br><br>
      <label for="password" class="sr-only"><b>Password: </b></label>
      <input
        type="password"
        id="password"
        class="form-control"
        placeholder="Password"
        v-model="user.password"
        required
      />
      <br><br>
      <label for="password" class="sr-only"><b>Password: </b></label>
      <input
        type="password"
        id="confirmPassword"
        class="form-control"
        placeholder="Confirm Password"
        v-model="user.confirmPassword"
        required
      />
      <br><br>
      <div id="log">
      <input type="submit" name="log" id="log" value="Create Account">
      <br><br>
      <router-link :to="{ name: 'login' }" tag="button" type="submit" id="log">Have An Account?</router-link>
      </div>
    </form>
  </div>
  <footer class="footer">
        <p class="copyright">Â© Tournament Hosting Tech Elevator 2021</p>
    </footer>
</body>
</template>

<script>
import authService from '../services/AuthService';

export default {
  name: 'register',
  data() {
    return {
      user: {
        username: '',
        password: '',
        confirmPassword: '',
        role: 'user',
      },
      registrationErrors: false,
      registrationErrorMsg: 'There were problems registering this user.',
    };
  },
  methods: {
    register() {
      if (this.user.password != this.user.confirmPassword) {
        this.registrationErrors = true;
        this.registrationErrorMsg = 'Password & Confirm Password do not match.';
      } else {
        authService
          .register(this.user)
          .then((response) => {
            if (response.status == 201) {
              this.$router.push({
                path: '/login',
                query: { registration: 'success' },
              });
            }
          })
          .catch((error) => {
            const response = error.response;
            this.registrationErrors = true;
            if (response.status === 400) {
              this.registrationErrorMsg = 'Bad Request: Validation Errors';
            }
          });
      }
    },
    clearErrors() {
      this.registrationErrors = false;
      this.registrationErrorMsg = 'There were problems registering this user.';
    },
  },
};
</script>

<style>
a{ 
  text-decoration: none;
}

body{  
    margin: 0;  
    padding: 0;  
    background-color:#6abadeba;
    font-family: 'Arial';  
}

#register{  
        width: 382px;  
        overflow: hidden;  
        margin: auto;  
        margin: 20 0 0 450px;  
        padding: 80px;  
        background: #23463f;
        border-radius: 15px ;           
}

h2{  
    text-align: center;  
    color: #277582;
    padding: 20px;  
} 

label{  
    color: #08ffd1;
    font-size: 17px;  
}  

.sr-only{  
    width: 300px;  
    height: 30px;  
    border: none;  
    border-radius: 3px;  
    padding-left: 8px;  
} 

#log{  
    width: 300px;  
    height: 30px;  
    border: none;  
    border-radius: 17px;  
    padding-left: 7px;  
    color: blue;
    cursor: pointer; 
}

footer {
        position: relative;
        height: 300px;
        width: 100%;
}

p.copyright {
        position: absolute;
        width: 100%;
        color: #fff;
        line-height: 40px;
        font-size: 0.7em;
        text-align: center;
        bottom:0;
}
</style>